/* DO NOT EDIT: This code has been generated by swagger-codegen */
(function () {
  'use strict';

  angular
    .module('cloud-foundry.api')
    .run(registerApi);

  registerApi.$inject = [
    '$http',
    'app.api.apiManager'
  ];

  function registerApi($http, apiManager) {
    apiManager.register('cloud-foundry.api.HceProjectApi', new HceProjectApi($http));
  }

  /**
    * @constructor
    * @name HceProjectApi
    * @description For more information on this API, please see:
    * https://github.com/hpcloud/hce-rest-service/blob/master/app/v2/swagger.yml
    * @param {object} $http - the Angular $http service
    * @property {object} $http - the Angular $http service
    * @property {string} baseUrl - the API base URL
    */
  function HceProjectApi($http) {
    this.$http = $http;
    this.baseUrl = '/pp/v1/proxy/v2';
  }

  angular.extend(HceProjectApi.prototype, {
    /**
     * @name addMember
     * @description Add a member (user) to a project.
     * @param {string} guid - the HCE instance GUID
     * @param {!number} projectId - The project id.
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    addMember: function (guid, projectId, params, httpConfigOptions) {
      var path = this.baseUrl + '/projects/{project_id}/members'
        .replace('{' + 'project_id' + '}', projectId);
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'POST',
        url: path,
        params: params || {},
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name addPipelineTask
     * @description Add a pipeline task for a specific project.
     * @param {string} guid - the HCE instance GUID
     * @param {object} data - the request body
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    addPipelineTask: function (guid, data, params, httpConfigOptions) {
      var path = this.baseUrl + '/pipelines/tasks';
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'POST',
        url: path,
        params: params || {},
        data: data,
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name createCfBinding
     * @description Creates a binding in CF between a CF application and an HCE project.
     * @param {string} guid - the HCE instance GUID
     * @param {!number} projectId - The project id.
     * @param {object} data - the request body
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    createCfBinding: function (guid, projectId, data, params, httpConfigOptions) {
      var path = this.baseUrl + '/projects/{project_id}/bindings/cloudfoundry'
        .replace('{' + 'project_id' + '}', projectId);
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'POST',
        url: path,
        params: params || {},
        data: data,
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name createProject
     * @description Create a new project.
     * @param {string} guid - the HCE instance GUID
     * @param {object} data - the request body
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    createProject: function (guid, data, params, httpConfigOptions) {
      var path = this.baseUrl + '/projects';
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'POST',
        url: path,
        params: params || {},
        data: data,
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name deleteProject
     * @description Delete the specified &#x60;Project&#x60; instance.\n
     * @param {string} guid - the HCE instance GUID
     * @param {!number} projectId - The id of the &#x60;Project&#x60; instance to delete.\n
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    deleteProject: function (guid, projectId, params, httpConfigOptions) {
      var path = this.baseUrl + '/projects/{project_id}'
        .replace('{' + 'project_id' + '}', projectId);
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'DELETE',
        url: path,
        params: params || {},
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name getPipelineTask
     * @description Get the specified pipeline task.
     * @param {string} guid - the HCE instance GUID
     * @param {!number} taskId - PipelineTask id.
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    getPipelineTask: function (guid, taskId, params, httpConfigOptions) {
      var path = this.baseUrl + '/pipelines/tasks/{task_id}'
        .replace('{' + 'task_id' + '}', taskId);
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name getPipelineTasks
     * @description List the pipeline tasks, optionally filtering by project.
     * @param {string} guid - the HCE instance GUID
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    getPipelineTasks: function (guid, params, httpConfigOptions) {
      var path = this.baseUrl + '/pipelines/tasks';
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name getProject
     * @description Get the specified instance.\n
     * @param {string} guid - the HCE instance GUID
     * @param {!number} projectId - HCE id of the &#x60;Project&#x60; to get.
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    getProject: function (guid, projectId, params, httpConfigOptions) {
      var path = this.baseUrl + '/projects/{project_id}'
        .replace('{' + 'project_id' + '}', projectId);
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name getProjectMembers
     * @description Get the project members.
     * @param {string} guid - the HCE instance GUID
     * @param {!number} projectId - The instance id.
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    getProjectMembers: function (guid, projectId, params, httpConfigOptions) {
      var path = this.baseUrl + '/projects/{project_id}/members'
        .replace('{' + 'project_id' + '}', projectId);
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name getProjects
     * @description List projects, optionally filtering.
     * @param {string} guid - the HCE instance GUID
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    getProjects: function (guid, params, httpConfigOptions) {
      var path = this.baseUrl + '/projects';
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'GET',
        url: path,
        params: params || {},
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name removeMember
     * @description Remove a member (user) from a project.
     * @param {string} guid - the HCE instance GUID
     * @param {!number} projectId - The project id.
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    removeMember: function (guid, projectId, params, httpConfigOptions) {
      var path = this.baseUrl + '/projects/{project_id}/members'
        .replace('{' + 'project_id' + '}', projectId);
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'DELETE',
        url: path,
        params: params || {},
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name removePipelineTask
     * @description Remove the specified pipeline task.
     * @param {string} guid - the HCE instance GUID
     * @param {!number} taskId - The PipelineTask id to remove.
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    removePipelineTask: function (guid, taskId, params, httpConfigOptions) {
      var path = this.baseUrl + '/pipelines/tasks/{task_id}'
        .replace('{' + 'task_id' + '}', taskId);
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'DELETE',
        url: path,
        params: params || {},
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    },

    /**
     * @name updateProject
     * @description Update the specified project.\n
     * @param {string} guid - the HCE instance GUID
     * @param {!number} projectId - The id of the &#x60;Project&#x60; instance.\n
     * @param {object} data - the request body
     * @param {object} params - the query parameters
     * @param {object} httpConfigOptions - additional config options
     * @returns {promise} A resolved/rejected promise
     */
    updateProject: function (guid, projectId, data, params, httpConfigOptions) {
      var path = this.baseUrl + '/projects/{project_id}'
        .replace('{' + 'project_id' + '}', projectId);
      var headers = {
        'x-cnap-cnsi-list': guid
      };

      var config = {
        method: 'PUT',
        url: path,
        params: params || {},
        data: data,
        headers: headers
      };

      angular.forEach(httpConfigOptions, function (optionConfig, option) {
        if (option === 'headers') {
          angular.extend(config[option], optionConfig);
        } else {
          config[option] = optionConfig;
        }
      });

      return this.$http(config);
    }
  });
})();
