---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: "{{ .Release.Name }}-postgres-volume"
 labels:
   app: "{{ .Release.Name }}"
 annotations:
  {{ if .Values.storageClass }}
    volume.beta.kubernetes.io/storage-class: {{ .Values.storageClass | quote }}
  {{ else }}
    volume.alpha.kubernetes.io/storage-class: default
  {{ end }}
spec:
 accessModes:
   - ReadWriteMany
 resources:
   requests:
     storage: 2Gi
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: "{{ .Release.Name }}-secret"
  labels:
    app: "{{ .Release.Name }}"
data:
  stolon: {{ .Values.dbPassword | b64enc }}
  pgsql-password: {{ .Values.dbPassword | b64enc }}
  console-cert-key: {{ .Files.Get "ssl/console.key" | b64enc }}
  console-cert: {{ .Files.Get "ssl/console.crt" | b64enc }}

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: console
spec:
  serviceName: console
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}"
        component: "console"
    spec:
      containers:
      - image: {{.Values.dockerRegistry}}/{{.Values.dockerOrg}}/{{.Values.images.console}}:{{.Values.consoleVersion}}
        name: ui
        volumeMounts:
        - mountPath: /etc/secrets/
          name: "{{ .Release.Name }}-secret"
          readOnly: true
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
     {{ if .Values.noShared }}
      - image: {{.Values.dockerRegistry}}/{{.Values.dockerOrg}}/{{.Values.images.postflight}}:{{.Values.consoleVersion}}
        name: "{{ .Release.Name }}-postflight"
        env:
        - name: PGSQL_HOST
          value: "{{ .Release.Name }}-postgres-int"
        - name: PGSQL_PORT
          value: "5432"
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD_FILE
          value: /etc/secrets/stolon
        - name: PGSQL_DATABASE
          value: console-db
        - name: PGSQL_USER
          value: console
        - name: PGSQL_PASSWORDFILE
          value: /etc/secrets/pgsql-password
        - name: PGSQL_SSL_MODE
          value: disable
        - name: PGCONNECT_TIMEOUT
          value: "10"
        - name: DO_NOT_QUIT
          value: "true"
        - name: UPGRADE_VOLUME
          value: "{{ .Release.Name }}-upgrade-volume"
        - name: UPGRADE_LOCK_FILENAME
          value: upgrade.lock
        - name: HTTP_PROXY
        {{ if .Values.httpProxy }}
          value: {{.Values.httpProxy}}
        {{ end }}
        - name: HTTPS_PROXY
        {{ if .Values.httpsProxy }}
          value: {{.Values.httpsProxy}}
        {{ end }}
        - name: NO_PROXY
        {{ if .Values.noProxy }}
          value: {{.Values.noProxy}}
        {{ end }}
        - name: FTP_PROXY
        {{ if .Values.ftpProxy }}
          value: {{.Values.ftpProxy}}
        {{ end }}
        - name: SOCKS_PROXY
        {{ if .Values.socksProxy }}  
          value: {{.Values.socksProxy}}
        {{ end }}
        volumeMounts:
          - mountPath: "/{{ .Release.Name }}-upgrade-volume"
            name: "{{ .Release.Name }}-upgrade-volume"
          - mountPath: /etc/secrets/
            name: "{{ .Release.Name }}-secret"
     {{ end }}
     {{ if not .Values.noShared }}
      - image: {{.Values.dockerRegistry}}/{{.Values.dockerOrg}}/{{.Values.images.proxy}}:{{.Values.consoleVersion}}
        name: proxy
     {{ else }}
      - image: {{.Values.dockerRegistry}}/{{.Values.dockerOrg}}/{{.Values.images.proxyNoShared}}:{{.Values.consoleVersion}}
        name: proxy
     {{ end }}
        env:
        - name: PGSQL_USER
          value: console
        - name: PGSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-secret"
              key: pgsql-password
        - name: PGSQL_DATABASE
          value: console-db
        - name: PGSQL_HOST
          value: "{{ .Release.Name }}-postgres-int"
        - name: PGSQL_PORT
          value: "5432"
        - name: PGSQL_CONNECT_TIMEOUT_IN_SECS
          value: "5"
        - name: PGSQL_SSL_MODE
          value: disable
        - name: HTTP_CONNECTION_TIMEOUT_IN_SECS
          value: "10"
        - name: HTTP_CLIENT_TIMEOUT_IN_SECS
          value: "20"
        - name: SKIP_TLS_VERIFICATION
          value: "false"
        - name: CONSOLE_PROXY_TLS_ADDRESS
          value: :3003
        - name: CF_CLIENT
          value: cf
        - name: UPGRADE_VOLUME
          value: "{{ .Release.Name }}-upgrade-volume"
        - name: UPGRADE_LOCK_FILENAME
          value: upgrade.lock
        - name: ALLOWED_ORIGINS
          value: https://localhost
        - name: ENCRYPTION_KEY_VOLUME
          value: "{{ .Release.Name }}-encryption-key-volume"
        - name: ENCRYPTION_KEY_FILENAME
          value: key
        - name: HTTP_PROXY
        {{ if .Values.httpProxy }}
          value: {{.Values.httpProxy}}
        {{ end }}
        - name: HTTPS_PROXY
        {{ if .Values.httpsProxy }}
          value: {{.Values.httpsProxy}}
        {{ end }}
        - name: NO_PROXY
        {{ if .Values.noProxy }}
          value: {{.Values.noProxy}}
        {{ end }}
        - name: FTP_PROXY
        {{ if .Values.ftpProxy }}
          value: {{.Values.ftpProxy}}
        {{ end }}
        - name: SOCKS_PROXY
        {{ if .Values.socksProxy }}
          value: {{.Values.socksProxy}}
        {{ end }}
        ports:
        - containerPort: 3003
          name: proxy
          protocol: TCP
        volumeMounts:
        - mountPath: "/{{ .Release.Name }}-upgrade-volume"
          name: "{{ .Release.Name }}-upgrade-volume"
        - mountPath: "/{{ .Release.Name }}-encryption-key-volume"
          name: "{{ .Release.Name }}-encryption-key-volume"
        - mountPath: /etc/secrets/
          name: "{{ .Release.Name }}-secret"
          readOnly: true
      volumes:
      - name: "{{ .Release.Name }}-postgres-volume"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-postgres-volume"
      - name: "{{ .Release.Name }}-upgrade-volume"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-upgrade-volume"
      - name: "{{ .Release.Name }}-encryption-key-volume"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-encryption-key-volume"
      - name: "{{ .Release.Name }}-secret"
        secret:
          secretName: "{{ .Release.Name }}-secret"
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: "postgres"
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}"
        component: postgres
    spec:
      containers:
      - image: {{.Values.dockerRegistry}}/{{.Values.dockerOrg}}/{{.Values.images.postgres}}:{{.Values.consoleVersion}}
        name: postgres
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD_FILE
          value: /etc/secrets/stolon
        - name: PGDATA
          value: /stolon-data/postgres
        - name: HTTP_PROXY
        {{ if .Values.httpProxy }}
          value: {{.Values.httpProxy}}
        {{ end }}
        - name: HTTPS_PROXY
        {{ if .Values.httpsProxy }}
          value: {{.Values.httpsProxy}}
        {{ end }}
        - name: NO_PROXY
        {{ if .Values.noProxy }}
          value: {{.Values.noProxy}}
        {{ end }}
        - name: FTP_PROXY
        {{ if .Values.ftpProxy }}
          value: {{.Values.ftpProxy}}
        {{ end }}
        - name: SOCKS_PROXY
        {{ if .Values.socksProxy }}
          value: {{.Values.socksProxy}}
        {{ end }}
        volumeMounts:
        - mountPath: /stolon-data
          name: "{{ .Release.Name }}-postgres-volume"
        - mountPath: /etc/secrets/
          name: "{{ .Release.Name }}-secret"
          readOnly: true
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
      volumes:
      - name: "{{ .Release.Name }}-postgres-volume"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-postgres-volume"
      - name: "{{ .Release.Name }}-encryption-key-volume"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-encryption-key-volume"
      - name: "{{ .Release.Name }}-secret"
        secret:
          secretName: "{{ .Release.Name }}-secret"
