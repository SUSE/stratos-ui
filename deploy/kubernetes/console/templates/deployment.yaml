---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: "{{ .Release.Name }}-secret"
  labels:
    app: "{{ .Release.Name }}"
data:
  stolon: {{ .Values.dbPassword | b64enc }}
  db-password: {{  .Values.mariadb.mariadbPassword | b64enc }}
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: console
spec:
  serviceName: console
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}"
        component: "console"
    spec:
      containers:
      - image: {{.Values.dockerRegistry}}/{{.Values.dockerOrg}}/{{.Values.images.console}}:{{.Values.consoleVersion}}
        name: ui
        env:
        - name: ENCRYPTION_KEY_VOLUME
          value: "{{ .Release.Name }}-encryption-key-volume"
        volumeMounts:
        - mountPath: /etc/secrets/
          name: "{{ .Release.Name }}-secret"
          readOnly: true
        - mountPath: "/{{ .Release.Name }}-encryption-key-volume"
          name: "{{ .Release.Name }}-encryption-key-volume"
          readOnly: true
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
     {{- if .Values.noShared }}
      - image: {{.Values.dockerRegistry}}/{{.Values.dockerOrg}}/{{.Values.images.postflight}}:{{.Values.consoleVersion}}
        name: "{{ .Release.Name }}-postflight"
        env:
        - name: DB_HOST
          value: "{{ .Release.Name }}-mariadb"
        - name: DB_PORT
          value: "3306"
        - name: DB_ADMIN_USER
          value:  "{{ .Values.mariadb.adminUser }}"
        - name: DB_ADMIN_PASSWORD
          value:  "{{ .Values.mariadb.mariadbRootPassword }}"
        - name: DATABASE_PROVIDER
          value: "{{ .Values.dbProvider }}"
        - name: DB_PASSWORD
          value: "{{ .Values.mariadb.mariadbPassword }}"
        - name: DB_USER
          value: "{{ .Values.mariadb.mariadbUser }}"
        - name: DB_DATABASE_NAME
          value: "{{ .Values.mariadb.mariadbDatabase }}"
        - name: DO_NOT_QUIT
          value: "true"
        - name: UPGRADE_VOLUME
          value: "{{ .Release.Name }}-upgrade-volume"
        - name: UPGRADE_LOCK_FILENAME
          value: upgrade.lock
        - name: HTTP_PROXY
        {{- if .Values.httpProxy }}
          value: {{.Values.httpProxy}}
        {{- end }}
        - name: HTTPS_PROXY
        {{- if .Values.httpsProxy }}
          value: {{.Values.httpsProxy}}
        {{- end }}
        - name: NO_PROXY
        {{- if .Values.noProxy }}
          value: {{.Values.noProxy}}
        {{- end }}
        - name: FTP_PROXY
        {{- if .Values.ftpProxy }}
          value: {{.Values.ftpProxy}}
        {{- end }}
        - name: SOCKS_PROXY
        {{- if .Values.socksProxy }}  
          value: {{.Values.socksProxy}}
        {{- end }}
        volumeMounts:
          - mountPath: "/{{ .Release.Name }}-upgrade-volume"
            name: "{{ .Release.Name }}-upgrade-volume"
          - mountPath: /etc/secrets/
            name: "{{ .Release.Name }}-secret"
     {{- end }}
     {{- if not .Values.noShared }}
      - image: {{.Values.dockerRegistry}}/{{.Values.dockerOrg}}/{{.Values.images.proxy}}:{{.Values.consoleVersion}}
     {{- else }}
      - image: {{.Values.dockerRegistry}}/{{.Values.dockerOrg}}/{{.Values.images.proxyNoShared}}:{{.Values.consoleVersion}}
     {{- end }}
        name: proxy
        env:
        - name: DB_USER
          value: "{{ .Values.mariadb.mariadbUser }}"
        - name: DB_PASSWORD
          value: "{{ .Values.mariadb.mariadbPassword }}"
        - name: DB_DATABASE_NAME
          value: "{{ .Values.mariadb.mariadbDatabase }}"
        - name: DB_HOST
          value: "{{ .Release.Name }}-mariadb"
        - name: DB_PORT
          value: "3306"
        - name: DATABASE_PROVIDER
          value: "{{ .Values.dbProvider }}"
        - name: DB_ADMIN_USER
          value:  "{{ .Values.mariadb.adminUser }}"
        - name: DB_ADMIN_PASSWORD
          value:  "{{ .Values.mariadb.mariadbRootPassword }}"
        - name: HTTP_CONNECTION_TIMEOUT_IN_SECS
          value: "10"
        - name: HTTP_CLIENT_TIMEOUT_IN_SECS
          value: "20"
        - name: SKIP_TLS_VERIFICATION
          value: "false"
        - name: CONSOLE_PROXY_TLS_ADDRESS
          value: :3003
        - name: CF_CLIENT
          value: cf
        - name: UPGRADE_VOLUME
          value: "{{ .Release.Name }}-upgrade-volume"
        - name: UPGRADE_LOCK_FILENAME
          value: upgrade.lock
        - name: ALLOWED_ORIGINS
          value: https://localhost
        - name: ENCRYPTION_KEY_VOLUME
          value: "{{ .Release.Name }}-encryption-key-volume"
        - name: ENCRYPTION_KEY_FILENAME
          value: key
        {{- if .Values.noShared }}
        {{- if .Values.consoleCert }}
        - name: CONSOLE_CERT
          value: | 
{{ .Values.consoleCert | indent 12 }}
        {{- end }}
        {{- if .Values.consoleCertKey }}
        - name: CONSOLE_CERT_KEY
          value: |
{{ .Values.consoleCertKey | indent 12 }}
        {{- end }}
        {{- end }}
        - name: CONSOLE_PROXY_CERT_PATH
          value: "/{{ .Release.Name }}-encryption-key-volume/console.crt" 
        - name: CONSOLE_PROXY_CERT_KEY_PATH
          value: "/{{ .Release.Name }}-encryption-key-volume/console.key" 
        - name: HTTP_PROXY
        {{- if .Values.httpProxy }}
          value: {{.Values.httpProxy}}
        {{- end }}
        - name: HTTPS_PROXY
        {{- if .Values.httpsProxy }}
          value: {{.Values.httpsProxy}}
        {{- end }}
        - name: NO_PROXY
        {{- if .Values.noProxy }}
          value: {{.Values.noProxy}}
        {{- end }}
        - name: FTP_PROXY
        {{- if .Values.ftpProxy }}
          value: {{.Values.ftpProxy}}
        {{- end }}
        - name: SOCKS_PROXY
        {{- if .Values.socksProxy }}
          value: {{.Values.socksProxy}}
        {{- end }}
        {{- if .Values.env.UAA_HOST }}  
        - name: UAA_ENDPOINT 
          value: https://scf.{{.Values.env.UAA_HOST}}:{{.Values.env.UAA_PORT}}
        - name: CONSOLE_CLIENT 
          value: cf
        - name: CONSOLE_CLIENT_SECRET
          value:
        - name: AUTO_REG_CF_URL
          value: https://api.{{.Values.env.DOMAIN}}
        - name: CONSOLE_ADMIN_SCOPE 
          value: cloud_controller.admin
        - name: SKIP_SSL_VALIDATION 
          value: "true"
        {{- else if .Values.uaa.host }}  
        - name: UAA_ENDPOINT 
          value: {{default "https://" .Values.uaa.protocol}}{{.Values.uaa.host}}:{{.Values.uaa.port}}
        - name: CONSOLE_CLIENT 
          value: {{.Values.uaa.consoleClient}}
        - name: CONSOLE_CLIENT_SECRET 
          value: {{.Values.uaa.consoleClientSecret}}
        - name: CONSOLE_ADMIN_SCOPE 
          value: {{.Values.uaa.consoleAdminIdentifier}}
        - name: SKIP_SSL_VALIDATION 
          value: {{default "true" .Values.uaa.skipSSLValidation | quote}}
        {{- end }}
        ports:
        - containerPort: 3003
          name: proxy
          protocol: TCP
        volumeMounts:
        - mountPath: "/{{ .Release.Name }}-upgrade-volume"
          name: "{{ .Release.Name }}-upgrade-volume"
        - mountPath: "/{{ .Release.Name }}-encryption-key-volume"
          name: "{{ .Release.Name }}-encryption-key-volume"
        - mountPath: /etc/secrets/
          name: "{{ .Release.Name }}-secret"
          readOnly: true
      {{- if .Values.dockerRegistrySecret }}
      imagePullSecrets:
      - name: {{.Values.dockerRegistrySecret}}
      {{- end }}
      volumes:
      - name: "{{ .Release.Name }}-upgrade-volume"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-upgrade-volume"
      - name: "{{ .Release.Name }}-encryption-key-volume"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-encryption-key-volume"
      - name: "{{ .Release.Name }}-secret"
        secret:
          secretName: "{{ .Release.Name }}-secret"