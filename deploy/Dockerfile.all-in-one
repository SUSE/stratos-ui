FROM golang:1.8-alpine

ENV VERSION=v6.10.3 NPM_VERSION=3

# Build, install Node, go and Glide
RUN apk update && \
  apk add --no-cache gcc musl-dev curl git openssl && \
  apk add --no-cache make gcc g++ libgcc libstdc++ python linux-headers binutils-gold gnupg libstdc++ && \
  gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    56730D5401028683275BD23C23EFEFE93C4CFFFE && \
  curl -sSLO https://nodejs.org/dist/${VERSION}/node-${VERSION}.tar.xz && \
  curl -sSL https://nodejs.org/dist/${VERSION}/SHASUMS256.txt.asc | gpg --batch --decrypt | \
    grep " node-${VERSION}.tar.xz\$" | sha256sum -c | grep . && \
  tar -xf node-${VERSION}.tar.xz && \
  cd node-${VERSION} && \
  ./configure --prefix=/usr && \
  make -j$(getconf _NPROCESSORS_ONLN) && \
  make install && \
  cd / && \
  if [ -x /usr/bin/npm ]; then \
    npm install -g npm@${NPM_VERSION} && \
    find /usr/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf; \
  fi
RUN curl https://glide.sh/get | sh && \
  rm -rf /node-${VERSION}* /usr/share/man /tmp/* /var/cache/apk/* \
    /root/.npm /root/.node-gyp /root/.gnupg /usr/lib/node_modules/npm/man \
    /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html /usr/lib/node_modules/npm/scripts

# Install JDK
ENV LANG C.UTF-8

# add a simple script that can auto-detect the appropriate JAVA_HOME value
# based on whether the JDK or only the JRE is installed
RUN { \
		echo '#!/bin/sh'; \
		echo 'set -e'; \
		echo; \
		echo 'dirname "$(dirname "$(readlink -f "$(which javac || which java)")")"'; \
	} > /usr/local/bin/docker-java-home \
	&& chmod +x /usr/local/bin/docker-java-home
ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk/jre
ENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin

ENV JAVA_VERSION 8u131

RUN set -x \
	&& apk add --no-cache \
		openjdk8-jre \
  && [ "$JAVA_HOME" = "$(docker-java-home)" ]
COPY ./ .
COPY deploy/all-in-one/config.all-in-one.properties config.properties

RUN npm install -g gulp bower \
    && bower install --allow-root \
    && npm install --only=prod \
    && npm run build \
    && npm run build-backend \
    && npm run build-cf

# Generate dev-certs
RUN DEV_CERTS_PATH=/go/dev-certs /go/deploy/ci/scripts/generate_cert.sh \
    && chmod +x portal-proxy

# Deploy UAA

ENV UAA_CONFIG_PATH /uaa
ENV CATALINA_HOME /tomcat
ENV DOWNLOAD_CACHE ./tmp

# UAA Configuration file
ADD deploy/uaa/uaa.yml /uaa/uaa.yml

RUN wget -q https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.28/bin/apache-tomcat-8.0.28.tar.gz
RUN wget -qO- https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.28/bin/apache-tomcat-8.0.28.tar.gz.md5 | md5sum -c -

ADD https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.28/bin/apache-tomcat-8.0.28.tar.gz .

RUN tar zxf apache-tomcat-8.0.28.tar.gz \
    && rm apache-tomcat-8.0.28.tar.gz \
    && mkdir /tomcat \ 
    &&  mv apache-tomcat-8.0.28/* /tomcat \
    && rm -rf /tomcat/webapps/*

ADD https://github.com/sequenceiq/uaa/releases/download/3.9.3/cloudfoundry-identity-uaa-3.9.3.war /tomcat/webapps/

RUN mv /tomcat/webapps/cloudfoundry-identity-uaa-3.9.3.war /tomcat/webapps/ROOT.war

EXPOSE 8080
EXPOSE 443

RUN  touch /run.sh && \
  echo '#!/bin/sh' >> /run.sh && \
  echo '/tomcat/bin/catalina.sh run &' >> /run.sh && \
  echo './portal-proxy' >> /run.sh && \
  chmod +x /run.sh

# Cleanup 
RUN find -maxdepth 1 -not -name *.so -not -name config.properties -not -name ui -not -name apache-tomcat* \
 -not -name db -not -name dev-certs -not -name plugins.json -not -name *.db -not -name portal-proxy -exec rm -r {} \;

ENTRYPOINT ["/run.sh"]
