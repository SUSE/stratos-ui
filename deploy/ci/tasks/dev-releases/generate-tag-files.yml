
---
platform: linux
inputs:
- name: stratos
outputs:
- name: image-tag
image_resource:
  type: docker-image
  source:
   # Generated using scripts/Dockerfile.stratos-ci
   repository: splatform/stratos-ci-concourse

run:
  path: bash
  args:
    - -exc
    - |
      echo "Generate tag files started..."

      cd stratos

      # RELEASE_TAG is the full tag that started the pipleine, e.g. '2.0.0-rc.1' 
      RELEASE_TAG=$(cat .git/ref)

      VERSION=$(cat package.json | grep version | grep -Po "([0-9\.]?)*")
      COMMIT_HASH=$(git log -1 --format="%h")
      LATEST_TAG=$VERSION-${COMMIT_HASH}
      SOURCE_CODE_REPO=$(git config --get remote.origin.url)

      # Check that the RELEASE_TAG matches the version
      if [[ "${RELEASE_TAG}" != ${VERSION}* ]]; then
        echo ".git/ref is not the expected release tag - falling back to git describe"
        RELEASE_TAG=$(git describe)
        if [[ "${RELEASE_TAG}" != ${VERSION}* ]]; then
          echo "Error: Can not get tag for this release - got ${RELEASE_TAG}"
          exit 1
        fi
      fi

      echo "Got Release tag ${RELEASE_TAG}"

      echo "Got version $VERSION from package.json."

      echo "Got $LATEST_TAG as the latest git tag."

      if [ ! -z ${TAG_SUFFIX} ]; then
        if [ "${TAG_SUFFIX}" != "null" ]; then
          echo "Adding tag suffix '$TAG_SUFFIX' to the latest tag."
          LATEST_TAG=${LATEST_TAG}-${TAG_SUFFIX}
          echo "The latest tag is now $LATEST_TAG."
        fi
      fi
      echo "Running store-git-metadata.sh..."

      ./build/store-git-metadata.sh

      echo "Finished running store-git-metadata.sh."
      echo "Creating ui-build-arg from the output of store-git-metadata.sh..."

      cat .stratos-git-metadata.json | tr -d '\n' > ../image-tag/ui-build-args
      echo "Created ui-build-args."

      echo "Creating v2-alpha-tag, v2-version and build-args..."

      cd ../image-tag
      echo "$LATEST_TAG" > v2-alpha-tag
      echo "$VERSION" > v2-version
      echo "$RELEASE_TAG" > v2-tag
      echo "$COMMIT_HASH" > v2-commit
      FILENAME="release-${LATEST_TAG}"
      cat > build-args << EOF
      { "stratos_version": "${LATEST_TAG}" }
      EOF
      cat > image-labels << EOF
      { "com.stratos.commit": "${COMMIT_HASH}" }
      EOF

      # Use uppercase values
      cat > ui-build-args << EOF
      { "STRATOS_COMMIT": "${COMMIT_HASH}", "STRATOS_BRANCH": "${COMMIT_HASH}", "STRATOS_PROJECT": "${SOURCE_CODE_REPO}" }
      EOF

      set +x

      echo "Created v2-alpha-tag, v2-version and build-args."

      echo "Contents of build-args:"
      cat build-args

      echo "Contents of ui-build-args:"
      cat ui-build-args

      echo "Contents of v2-alpha-tag:"
      cat v2-alpha-tag
      
      echo "Contents of image-labels:"
      cat image-labels

      set -x

      echo "Creating tag file tar..."
      tar -cf ${FILENAME}.tar v2-alpha-tag v2-version v2-tag v2-commit build-args ui-build-args image-labels

      echo "Created tag file tar as ${FILENAME}.tar"
      echo "Generate tag files complete!"
